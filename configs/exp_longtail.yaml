# configs/exp_longtail.yaml
# Long-Tailed Object Detection Configuration for Drone Traffic

# ==================== Task & Model ====================
task: "detection"
model_name: "yolov12l.pt"  # or yolov8s/m/l/x, yolov9
num_classes: 4
class_names: ["car", "motorcycle", "person", "hov"]

# Class distribution (實際數據，用於 CB Loss)
# 根據你的圖表：car ≈ 23000, motorcycle ≈ 5000, person ≈ 3000, hov ≈ 1000
samples_per_cls: [23000, 5000, 3000, 1000]

# ==================== Data Paths ====================
image_dir: "data/images"
annotation_file: "data/annotations.json"  # COCO format

# Split method: 'file' or 'ratio'
split_method: "ratio"
train_ratio: 0.7
val_ratio: 0.2
test_ratio: 0.1

# Or provide explicit file lists
# train_ids_file: "data/splits/train.txt"
# val_ids_file: "data/splits/val.txt"
# test_ids_file: "data/splits/test.txt"

# ==================== Training Hyperparameters ====================
# Image size
imgsz: 640

# Batch size (adjust based on GPU memory)
batch: 16

# Learning rate
lr: 0.001
weight_decay: 0.0001

# Optimizer
optimizer: "AdamW"  # or "SGD"
momentum: 0.937  # for SGD

# Workers
workers: 8

# ==================== Long-Tail Strategies ====================
# Loss function
use_cb_loss: true
cb_beta: 0.9999
focal_gamma: 2.0
focal_alpha: [0.25, 0.5, 0.75, 1.0]  # per class

# Sampling strategy
use_repeat_factor_sampling: true
repeat_thresh: 0.5

# Class-aware augmentation
strong_aug_for_tail: true
tail_class_ids: [1, 2, 3]  # motorcycle, person, hov

# Copy-Paste augmentation for tail classes
use_copy_paste: false
copy_paste_prob: 0.3

# ==================== Two-Stage Training (Optional) ====================
two_stage_training: false
stage1_epochs: 100  # Train on all classes
stage2_epochs: 50   # Fine-tune on tail classes
stage2_lr: 0.0001
freeze_backbone_stage2: false

# ==================== Evaluation ====================
# Metrics to track
metrics:
  - "map50"
  - "map5095"
  - "precision"
  - "recall"
  - "f1"

# Per-class evaluation
per_class_metrics: true

# Confidence threshold for evaluation
conf_threshold: 0.001
iou_threshold: 0.6

# NMS
nms_iou: 0.7

# ==================== Logit Adjustment (Test-time) ====================
# Adjust logits during inference to compensate for class imbalance
use_logit_adjustment: false
tau: 1.0  # temperature for adjustment

# ==================== Advanced Options ====================
# Model architecture modifications
use_decoupled_head: false
use_cosine_classifier: false

# Feature enhancement
use_cbam: false  # Convolutional Block Attention Module
use_fpn_attention: false

# ==================== Augmentation Details ====================
augmentation:
  # Basic augmentation (for all classes)
  basic:
    horizontal_flip: 0.5
    vertical_flip: 0.0
    rotate_limit: 10
    brightness: 0.2
    contrast: 0.2
  
  # Strong augmentation (for tail classes)
  strong:
    horizontal_flip: 0.7
    vertical_flip: 0.3
    rotate_limit: 30
    brightness: 0.4
    contrast: 0.4
    hue_shift: 0.1
    saturation: 0.3
    gaussian_noise: 0.1
    motion_blur: 0.1
    cutout: 0.3
    mixup: 0.2
    mosaic: 0.5

# ==================== Validation Strategy ====================
# Validate every N epochs
val_interval: 1

# Save predictions during validation
save_val_preds: true

# Visualize predictions
visualize_val: false
vis_samples: 20

# ==================== Notes ====================
# 實驗說明（會被記錄到 hparams.json）
experiment_notes: |
  Long-Tailed Object Detection for Drone-based Traffic Counting
  - Using YOLOv12 with Class-Balanced Focal Loss
  - Repeat Factor Sampling for tail classes
  - Strong augmentation for hov/person/motorcycle
  - Target: Improve AP on tail classes while maintaining overall mAP